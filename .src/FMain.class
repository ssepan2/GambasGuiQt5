' Gambas class file

' Constants
Private Const APP_TITLE_FORMAT As String = ("&1 - Gambas GUI Qt5")

' #Region "Declarations"
Private $objStatusBarViewModel As StatusBarViewModel

Private $objModel As SomeModel = Null
Private $bStopControlEvents As Boolean = False

'Form
Private $objToolBarActionsDock As Dock
Private $objStatusBarDock As Dock
Private $objPanelBottomDock As Dock
Private $objPanelRightSideDock As Dock
Private $objPanelLeftSideDock As Dock
Private $objPanelTopDock As Dock

Private $objPanelTestAnchor As Anchor
Private $objButtonCloseAnchor As Anchor

'PanelGrid
Private $objPanelGridTexAreaDock As Dock

Private $objPanelGridGridViewAnchor As Anchor

'PanelStatusBar
Private $objPanelStatusBarStatusMessage As Anchor
Private $objPanelStatusBarErrorMessage As Anchor
Private $objPanelStatusBarStatusProgressBar As Anchor
Private $objPanelStatusBarStatusActionIcon As Anchor
Private $objPanelStatusBarStatusDirtyIcon As Anchor
' #End Region

' #Region "Constructors"
' Public Sub _new()
' End
' #End Region

' #Region "INotifyPropertyChanged"
Public $obsPropertyChanged As Observer
' #End Region

' #Region "PropertyChanged Handlers"
''' <summary>
''' Handler for PropertyChanged on the Settings field 'Dirty'.
''' </summary>
Public Sub $objModel_PropertyChanged(propertyName As String)

    $bStopControlEvents = True
    'TODO:consider using Object.Lock(controlname)/Object.Unlock(controlname)
    Select propertyName
        Case "Key"
            '(usually)do nothing unless Key can be directly edited
            Me.Title = Subst(APP_TITLE_FORMAT, $objModel.Key)
            ' Debug Subst(("&1: &2"), propertyName, $objModel.Key)
        Case "SomeString"
            SomeStringTextBox.text = $objModel.SomeString
            ' Debug Subst(("&1: &2"), propertyName, $objModel.SomeString)
        Case "SomeInteger"
            SomeIntegerValueBox.value = $objModel.SomeInteger
            ' Debug Subst(("&1: &2"), propertyName, $objModel.SomeInteger)
        Case "SomeBoolean"
            SomeBooleanCheckBox.Value = $objModel.SomeBoolean
            ' Debug Subst(("&1: &2"), propertyName, $objModel.SomeBoolean)
        Case "SomeDateTime"
            SomeDateTimeValueBox.value = $objModel.SomeDateTime
            ' Debug Subst(("&1: &2"), propertyName, $objModel.SomeDateTime)
        Case "Dirty"
            ' StatusDirtyIcon.Visible = $objModel.Dirty 'use wrapper sub in viewmodel
            $objStatusBarViewModel.SetDirtyIndicator($objModel.Dirty)
            ' Debug Subst(("&1: &2"), propertyName, $objModel.Dirty)
        Case Else
            Debug Subst(("unhandled event: &1"), propertyName)
    End Select
    ' Debug Subst(("PropertyChanged handled: &1"), propertyName)
Finally
    $bStopControlEvents = False
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

End
' #End Region

' #Region "Properties"
' #End Region

' #Region "Methods"

'
' Form
'

Public Function Action_Activate(sActionName As String) As Boolean
    'Note: I am not sure I see the benefit of using this dispatch mechanism over direct click events (I like the other aspects of Action).
    'Maybe if the actions were *directly executed* by the controls *for me* I'd be more sold on the idea.
    'Having to wire up the dispatching manually seems brittle.

    Select sActionName
        Case "FileNew"
            FileNew
        Case "FileOpen"
            FileOpen
        Case "FileSave"
            FileSave
        Case "FileSaveAs"
            FileSaveAs
        Case "FilePrint"
            FilePrint
        Case "FileExit"
            FileExit
        Case "EditUndo"
            EditUndo
        Case "EditRedo"
            EditRedo
        Case "EditSelectAll"
            EditSelectAll
        Case "EditCut"
            EditCut
        Case "EditCopy"
            EditCopy
        Case "EditPaste"
            EditPaste
        Case "EditDelete"
            EditDelete
        Case "EditFind"
            EditFind
        Case "EditReplace"
            EditReplace
        Case "EditRefresh"
            EditRefresh
        Case "EditPreferences"
            EditPreferences
        Case "HelpContents"
            HelpContents
        Case "HelpIndex"
            HelpIndex
        Case "HelpOnlineHelp"
            HelpOnlineHelp
        Case "HelpLicenceInformation"
            HelpLicenceInformation
        Case "HelpCheckForUpdates"
            HelpCheckForUpdates
        Case "HelpAbout"
            HelpAbout
        Case Else
            Print Subst(("Action_Activate: &1"), sActionName)
    End Select
    Return False

End

Public Sub Form_Open()

    'ViewModel
    $objStatusBarViewModel = New StatusBarViewModel(lblStatusMessage, lblErrorMessage, StatusProgressBar, StatusActionIcon, StatusDirtyIcon) 'Don't use 'Me.' or caller will say  'wanted x got Function instead'

    'Note: the order instantiated defines an order of precedence for Docks as they examine adjacent Docks to handle stacking and shared corners. Instantiated items are added to an internal list maintained by DockAnchor.
    'Form
    $objToolBarActionsDock = New Dock(ToolBarActions, True, Dock.DockTop)
    $objStatusBarDock = New Dock(PanelStatusBar, True, Dock.DockBottom)
    'additional panels used and docked for no reason except to demonstrate enhanced docking capability (v0.2)
    $objPanelBottomDock = New Dock(PanelBottom, True, Dock.DockBottom)
    $objPanelRightSideDock = New Dock(PanelRightSide, True, Dock.DockRight)
    $objPanelLeftSideDock = New Dock(PanelLeftSide, True, Dock.DockLeft)
    $objPanelTopDock = New Dock(PanelTop, True, Dock.DockTop)

    $objButtonCloseAnchor = New Anchor(ButtonClose, True, Anchor.AnchorBottom + Anchor.AnchorRight)
    $objPanelTestAnchor = New Anchor(PanelTest, True, Anchor.AnchorLeft + Anchor.AnchorRight + Anchor.AnchorTop + Anchor.AnchorBottom)

    'PanelGrid
    $objPanelGridTexAreaDock = New Dock(TextArea1, False, Dock.DockTop)
    $objPanelGridGridViewAnchor = New Anchor(GridView1, False, Anchor.AnchorTop + Anchor.AnchorRight + Anchor.AnchorBottom + Anchor.AnchorLeft)

    'PanelStatusbar
    $objPanelStatusBarStatusMessage = New Anchor(lblStatusMessage, False, Anchor.AnchorLeft + Anchor.AnchorTop + Anchor.AnchorRight)
    $objPanelStatusBarErrorMessage = New Anchor(lblErrorMessage, False, Anchor.AnchorLeft + Anchor.AnchorBottom + Anchor.AnchorRight)
    $objPanelStatusBarStatusProgressBar = New Anchor(StatusProgressBar, False, Anchor.AnchorRight)
    $objPanelStatusBarStatusActionIcon = New Anchor(StatusActionIcon, False, Anchor.AnchorRight)
    $objPanelStatusBarStatusDirtyIcon = New Anchor(StatusDirtyIcon, False, Anchor.AnchorRight)

    OpenFormFromSettings

    FileNew

    InitSettingsGrid
    LoadSettingsGrid

    Wait 1
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

End

Public Sub Form_Close()

    SaveFormToSettings

    'Note: As items are freed, they are removed from an internal list managed by DockAnchor. Here I make a practice of removing them in reverse order.
    'PanelStatusBar
    $objPanelStatusBarStatusDirtyIcon = Null
    $objPanelStatusBarStatusActionIcon = Null
    $objPanelStatusBarStatusProgressBar = Null
    $objPanelStatusBarErrorMessage = Null
    $objPanelStatusBarStatusMessage = Null

    'PanelGrid
    $objPanelGridGridViewAnchor = Null
    $objPanelGridTexAreaDock = Null

    'Form
    $objButtonCloseAnchor = Null
    $objPanelTestAnchor = Null

    $objPanelTopDock = Null
    $objPanelLeftSideDock = Null
    $objPanelRightSideDock = Null
    $objPanelBottomDock = Null
    $objStatusBarDock = Null
    $objToolBarActionsDock = Null

    'ViewModel
    $objStatusBarViewModel = Null
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

End

Public Sub Form_Resize()

    If Me.Width < 800 Then
        Me.Width = $objToolBarActionsDock.$iFormDesignerWidth
    Endif
    If Me.Height < 600 Then
        Me.Height = $objToolBarActionsDock.$iFormDesignerHeight
    Endif

    ' Note: other containers do not have a Resize event, and the Arrange event seems to fire too often, so try Apply here for container children using DockAnchor

    'Note: run Apply for Form children here
    'Form
    $objToolBarActionsDock.Apply
    $objStatusBarDock.Apply
    $objPanelBottomDock.Apply
    $objPanelRightSideDock.Apply
    $objPanelLeftSideDock.Apply
    $objPanelTopDock.Apply

    $objPanelTestAnchor.Apply
    $objButtonCloseAnchor.Apply

    'PanelGrid
    $objPanelGridTexAreaDock.Apply
    $objPanelGridGridViewAnchor.Apply

    'Note: run Apply for Container children here

    'PanelStatusBar
    $objPanelStatusBarStatusMessage.Apply
    $objPanelStatusBarErrorMessage.Apply
    $objPanelStatusBarStatusProgressBar.Apply
    $objPanelStatusBarStatusActionIcon.Apply
    $objPanelStatusBarStatusDirtyIcon.Apply

End

'
' Menu
'

'
' Toolbar
'

'
' Controls
'

Public Sub SomeStringTextBox_Change()

    If $bStopControlEvents Then
        Stop Event
    Else
        $objModel.SomeString = SomeStringTextBox.text
    Endif

End

Public Sub SomeIntegerValueBox_Change()

    If $bStopControlEvents Then
        Stop Event
    Else
        $objModel.SomeInteger = SomeIntegerValueBox.Value
    Endif

End

Public Sub SomeBooleanCheckBox_Click()

    If $bStopControlEvents Then
        Stop Event
    Else
        $objModel.SomeBoolean = SomeBooleanCheckBox.Value
    Endif

End

Public Sub SomeDateTimeValueBox_Change()

    If $bStopControlEvents Then
        Stop Event
    Else
        $objModel.SomeDateTime = SomeDateTimeValueBox.Value
    Endif

End

'
' ViewModel
'
'temp
Private Function Something() As Boolean

    Wait 1
    Return True

End

Private Function CheckForSaveOrCancel() As Boolean

    Dim bCancel As Boolean = False

    If Not IsNull($objModel) Then
        If $objModel.Dirty Then
            'prompt before saving
            Select Case Message.Question(Subst(("Save changes?: &1"), $objModel.Key), ("&Yes"), ("&No"), ("&Cancel"))
                Case 1
                    'Yes, SAVE
                    FileSave(True)
                Case 2
                    'No, skip Save, continue to do Action
                Case 3
                    'Cancel, skip Save, skip New
                    bCancel = True
                Case Else
                    bCancel = True
                    Error.Raise("InvalidEnumArgumentException")
            End Select
        Endif
    Endif
Finally
    Return bCancel
Catch
    bCancel = True
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

End 'Function

Public Sub FileNew()

    Dim bCancel As Boolean = False
    Dim sStatusMessage As String

    bCancel = CheckForSaveOrCancel()

    $objStatusBarViewModel.StartProgressBarWithPicture(("New..."), Null, Action["FileNew"].Picture, True, 33)
    Action["FileNew"].Enabled = False

    If bCancel Then
        sStatusMessage = ("New cancelled.")
    Else
        'NEW
        $objModel = New SomeModel(Me, "$objModel")
        $objModel.RefreshModel 'to update view

        sStatusMessage = ("New completed.")
        ' $objStatusBarViewModel.StopProgressBar(sStatusMessage)
    Endif
Finally
    Action["FileNew"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar("", Error.Text)

End 'Sub

Public Sub FileOpen()

    Dim bCancel As Boolean = False
    Dim response As String = Null
    Dim sStatusMessage As String
    ' Dim sErrormessage As String

    bCancel = CheckForSaveOrCancel()

    $objStatusBarViewModel.StartProgressBarWithPicture(("Opening..."), Null, Action["FileOpen"].Picture, True, 33)
    Action["FileOpen"].Enabled = False

    If bCancel Then
        sStatusMessage = ("Open cancelled during Save.")
    Else
        response = InputBox(("Enter Name for model:"), ("Open..."), Null)
        If Not IsNull(response) Then
            If Not SomeModel.VerifyKey(Settings, response) Then
                Error.Raise(Subst(("ID not found in settings: Slot ='&1'"), response))
            Else
                $objModel.Key = response
            Endif
        Else
            bCancel = True
        Endif

        If bCancel Then
            sStatusMessage = ("Open cancelled during model name input.")
        Else
            'OPEN
            If SomeModel.OpenFromSettings($objModel, Settings, response) Then

                sStatusMessage = Subst(("Opened '&1'."), response)
            Else
                'clear model on failure;
                ' NEW
                $objModel = New SomeModel(Me, "$objModel")
                $objModel.RefreshModel
                Error.Raise(Subst(("Unable to Open: '&1'"), response))
            Endif
        Endif
    Endif
Finally
    Action["FileOpen"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Error.Text) 'Note:Finally fires before Catch

End 'Sub

'' <summary>
'' Write model to settings
'' </summary>
'' <param name="bSaveAs">Boolean. Force SaveAs prompt for name</param>
Public Sub FileSave(Optional bSaveAs As Boolean = False)

    Dim bCancel As Boolean = False
    Dim response As String = Null
    Dim sStatusMessage As String

    If bSaveAs Then
        $objStatusBarViewModel.StartProgressBarWithPicture(("Saving As..."), Null, Action["FileSaveAs"].Picture, True, 33)
        Action["FileSaveAs"].Enabled = False
    Else
        $objStatusBarViewModel.StartProgressBarWithPicture(("Saving..."), Null, Action["FileSave"].Picture, True, 33)
        Action["FileSave"].Enabled = False
    Endif

    If IsNull($objModel.Key) Or If ($objModel.Key = ModelBase.KEY_NEW) Or If bSaveAs Then
        response = InputBox(("Enter Name for model:"), ("Save As..."), $objModel.Key)
        If (Not IsNull(response) And response <> ModelBase.KEY_NEW) Then
            $objModel.Key = response
        Else
            bCancel = True
        Endif
    Endif

    If bCancel Then
        sStatusMessage = ("Save cancelled during model name input.")
    Else
        'SAVE
        $objModel.SaveToSettings(Settings) 'TODO:if saveas, read and if already present, prompt to replace
        sStatusMessage = Subst(("Saved '&1'."), $objModel.Key)
        LoadSettingsGrid
    Endif

Finally
    If bSaveAs Then
        Action["FileSaveAs"].Enabled = True
    Else
        Action["FileSave"].Enabled = True
    Endif
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Error.Text)

End 'Sub

Public Sub FileSaveAs()

    FileSave(True)

End

Public Sub FilePrint()

    Dim sStatusMessage As String
    Dim Printer1 As Printer

    $objStatusBarViewModel.StartProgressBarWithPicture(("Printing..."), Null, Action["FilePrint"].Picture, True, 33)
    Action["FilePrint"].Enabled = False

    If Something() Then 'TODO:print
        Printer1 = New Printer As "Printer1"
        Printer1.Configure()
        ' Printer1.Preview()

        sStatusMessage = ("Printed.")
    Else
        sStatusMessage = ("Print cancelled.")
    Endif
Finally
    Action["FilePrint"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Subst(("Print failed: '&1'"), Error.Text))

End 'Sub

Public Sub FileExit()

    Dim sStatusMessage As String
    Dim bCancel As Boolean = False

    $objStatusBarViewModel.StartProgressBarWithPicture(("Exiting..."), Null, Null, True, 33)
    Action["FileExit"].Enabled = False

    bCancel = CheckForSaveOrCancel()

    If bCancel Then
        sStatusMessage = ("Exit cancelled during model name input.")
    Else
        'EXIT
        Me.Close
    Endif

Finally
    'will not be seen unless Exit cancelled during a SaveAs
    If (bCancel) Then
        Action["FileExit"].Enabled = True
        $objStatusBarViewModel.StopProgressBar(sStatusMessage)
    Endif
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

End 'Sub

Public Sub EditUndo()

    Dim sStatusMessage As String

    $objStatusBarViewModel.StartProgressBarWithPicture(("Undo..."), Null, Action["EditUndo"].Picture, True, 33)
    Action["EditUndo"].Enabled = False

    If Something() Then 'TODO:undo
        sStatusMessage = ("Undo done.")
    Else
        sStatusMessage = ("Undo cancelled.")
    Endif
Finally
    Action["EditUndo"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Subst(("Undo failed: '&1'"), Error.Text))

End

Public Sub EditRedo()

    Dim sStatusMessage As String

    $objStatusBarViewModel.StartProgressBarWithPicture(("Redo..."), Null, Action["EditRedo"].Picture, True, 33)
    Action["EditRedo"].Enabled = False

    If Something() Then 'TODO: redo
        sStatusMessage = ("Redo done.")
    Else
        sStatusMessage = ("Redo cancelled.")
    Endif
Finally
    Action["EditRedo"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Subst(("Redo failed: '&1'"), Error.Text))

End

Public Sub EditSelectAll()

    Dim sStatusMessage As String

    $objStatusBarViewModel.StartProgressBarWithPicture(("Select All..."), Null, Null, True, 33)
    Action["EditSelectAll"].Enabled = False

    If Something() Then 'TODO: SelectAll
        sStatusMessage = ("Select All done.")
    Else
        sStatusMessage = ("Select All cancelled.")
    Endif
Finally
    Action["EditSelectAll"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Subst(("Select All failed: '&1'"), Error.Text))

End

Public Sub EditCut()

    Dim sStatusMessage As String

    $objStatusBarViewModel.StartProgressBarWithPicture(("Cut..."), Null, Action["EditCut"].Picture, True, 33)
    Action["EditCut"].Enabled = False

    If Something() Then 'TODO:cut
        sStatusMessage = ("Cut done.")
    Else
        sStatusMessage = ("Cut cancelled.")
    Endif
Finally
    Action["EditCut"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Subst(("Cut failed: '&1'"), Error.Text))

End

Public Sub EditCopy()

    Dim sStatusMessage As String

    $objStatusBarViewModel.StartProgressBarWithPicture(("Copying..."), Null, Action["EditCopy"].Picture, True, 33)
    Action["EditCopy"].Enabled = False

    If Something() Then 'TODO:copy
        sStatusMessage = ("Copy done.")
    Else
        sStatusMessage = ("Copy cancelled.")
    Endif
Finally
    Action["EditCopy"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Subst(("Copy failed: '&1'"), Error.Text))

End 'Sub

Public Sub EditPaste()

    Dim sStatusMessage As String

    $objStatusBarViewModel.StartProgressBarWithPicture(("Paste..."), Null, Action["EditPaste"].Picture, True, 33)
    Action["EditPaste"].Enabled = False

    If Something() Then 'TODO:paste
        sStatusMessage = ("Paste done.")
    Else
        sStatusMessage = ("Paste cancelled.")
    Endif
Finally
    Action["EditPaste"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Subst(("Paste failed: '&1'"), Error.Text))

End

Public Sub EditDelete()

    Dim sStatusMessage As String

    $objStatusBarViewModel.StartProgressBarWithPicture(("Delete..."), Null, Action["EditDelete"].Picture, True, 33)
    Action["EditDelete"].Enabled = False

    If Something() Then 'TODO:delete
        sStatusMessage = ("Delete done.")
    Else
        sStatusMessage = ("Delete cancelled.")
    Endif
Finally
    Action["EditDelete"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Subst(("Delete failed: '&1'"), Error.Text))

End

Public Sub EditFind()

    Dim sStatusMessage As String

    $objStatusBarViewModel.StartProgressBarWithPicture(("Find..."), Null, Action["EditFind"].Picture, True, 33)
    Action["EditFind"].Enabled = False

    If Something() Then 'TODO:find
        sStatusMessage = ("Find done.")
    Else
        sStatusMessage = ("Find cancelled.")
    Endif
Finally
    Action["EditFind"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Subst(("Find failed: '&1'"), Error.Text))

End

Public Sub EditReplace()

    Dim sStatusMessage As String

    $objStatusBarViewModel.StartProgressBarWithPicture(("Replace..."), Null, Action["EditReplace"].Picture, True, 33)
    Action["EditReplace"].Enabled = False

    If Something() Then 'TODO:Replace
        sStatusMessage = ("Replace done.")
    Else
        sStatusMessage = ("Replace cancelled.")
    Endif
Finally
    Action["EditReplace"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Subst(("Replace failed: '&1'"), Error.Text))

End

Public Sub EditRefresh()

    Dim sStatusMessage As String

    $objStatusBarViewModel.StartProgressBarWithPicture(("Refresh..."), Null, Action["EditRefresh"].Picture, True, 33)
    Action["EditRefresh"].Enabled = False

    $objModel.RefreshModel
    sStatusMessage = "Refresh done."
Finally
    Action["EditRefresh"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Subst(("Refresh failed: '&1'"), Error.Text))

End

Public Sub EditPreferences()

    Dim sStatusMessage As String

    $objStatusBarViewModel.StartProgressBarWithPicture(("Preferences..."), Null, Action["EditPreferences"].Picture, True, 33)
    Action["EditPreferences"].Enabled = False

    If Something() Then 'TODO:Preferences
        sStatusMessage = ("Preferences done.")
    Else
        sStatusMessage = ("Preferences cancelled.")
    Endif
Finally
    Action["EditPreferences"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Subst(("Preferences failed: '&1'"), Error.Text))

End 'Sub

Public Sub HelpContents()

    Dim sStatusMessage As String

    $objStatusBarViewModel.StartProgressBarWithPicture(("Contents..."), Null, Action["HelpContents"].Picture, True, 33)
    Action["HelpContents"].Enabled = False

    If Something() Then 'TODO:Contents
        sStatusMessage = ("Contents done.")
    Else
        sStatusMessage = ("Contents cancelled.")
    Endif
Finally
    Action["HelpContents"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Subst(("Contents failed: '&1'"), Error.Text))

End

Public Sub HelpIndex()

    Dim sStatusMessage As String

    $objStatusBarViewModel.StartProgressBarWithPicture(("Index..."), Null, Null, True, 33)
    Action["HelpIndex"].Enabled = False

    If Something() Then 'TODO:Index
        sStatusMessage = ("Index done.")
    Else
        sStatusMessage = ("Index cancelled.")
    Endif
Finally
    Action["HelpIndex"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Subst(("Index failed: '&1'"), Error.Text))

End

Public Sub HelpOnlineHelp()

    Dim sStatusMessage As String

    $objStatusBarViewModel.StartProgressBarWithPicture(("Online Help..."), Null, Null, True, 33)
    Action["HelpOnlineHelp"].Enabled = False

    If Something() Then 'TODO:OnlineHelp
        sStatusMessage = ("Online Help done.")
    Else
        sStatusMessage = ("Online Help cancelled.")
    Endif
Finally
    Action["HelpOnlineHelp"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Subst(("Online Help failed: '&1'"), Error.Text))

End

Public Sub HelpLicenceInformation()

    Dim sStatusMessage As String

    $objStatusBarViewModel.StartProgressBarWithPicture(("Licence Information..."), Null, Null, True, 33)
    Action["HelpLicenceInformation"].Enabled = False

    If Something() Then 'TODO:LicenceInformation
        sStatusMessage = ("Licence Information done.")
    Else
        sStatusMessage = ("Licence Information cancelled.")
    Endif
Finally
    Action["HelpLicenceInformation"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Subst(("Licence Information failed: '&1'"), Error.Text))

End

Public Sub HelpCheckForUpdates()

    Dim sStatusMessage As String

    $objStatusBarViewModel.StartProgressBarWithPicture(("Check For Updates..."), Null, Null, True, 33)
    Action["HelpCheckForUpdates"].Enabled = False

    If Something() Then 'TODO:CheckForUpdates
        sStatusMessage = ("Check For Updates done.")
    Else
        sStatusMessage = ("Check For Updates cancelled.")
    Endif
Finally
    Action["HelpCheckForUpdates"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(sStatusMessage)
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Subst(("Check For Updates failed: '&1'"), Error.Text))

End

Public Sub HelpAbout()

    $objStatusBarViewModel.StartProgressBarWithPicture(("About..."), Null, Action["HelpAbout"].Picture, True, 33)
    Action["HelpAbout"].Enabled = False

    Message(Dialogs.FormatAbout())
Finally
    Action["HelpAbout"].Enabled = True
    $objStatusBarViewModel.StopProgressBar(("About completed."))
Catch 'ex As Exception
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

    $objStatusBarViewModel.StopProgressBar(Null, Error.Text)

End 'Sub

Private Sub InitSettingsGrid()

    GridView1.Header = GridView.Both
    GridView1.AddColumn("Slot", -1, Align.Normal)
    GridView1.AddColumn("Key", -1, Align.Normal)
    GridView1.AddColumn("Value", -1, Align.Normal)

End

Private Sub LoadSettingsGrid()

    Dim sSlot, sKey As String
    Dim iCurrentRow As Integer = 0
    ' Dim objGridViewRow As _GridView_Row

    For Each sSlot In Settings.Keys
        For Each sKey In Settings.Keys[sSlot]
            ' Print Subst("&1/&2", sSlot, sKey)
            GridView1.Rows.Insert(iCurrentRow)
            GridView1[iCurrentRow, 0].Text = sSlot
            GridView1[iCurrentRow, 1].Text = sKey
            GridView1[iCurrentRow, 2].Text = Settings[Subst(("&1/&2"), sSlot, sKey), ""]
            ' If (iCurrentRow % 2) = 0 Then
            '     objGridViewRow = GridView.Rows[iCurrentRow]
            '     objGridViewRow.TextAlignment = Align.Left
            ' Else
            '     objGridViewRow = GridView.Rows[iCurrentRow]
            '     objGridViewRow.TextAlignment = Align.Right
            ' Endif

            iCurrentRow += 1
        Next
    Next

End

' #End Region

Private Sub SaveFormToSettings()

    Dim sKey As String

    sKey = Me.Name '"FMain"

    If IsNull(Me.key) Then
        Error.Raise(("SaveFormToSettings: key is null"))
    Endif

    Settings[sKey & "/Top"] = Me.Top
    Settings[sKey & "/Left"] = Me.Left
    Settings[sKey & "/Height"] = Me.Height
    Settings[sKey & "/Width"] = Me.Width
    Settings.Save 'done automatically?
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)

End

Private Function OpenFormFromSettings() As Boolean

    Dim returnValue As Boolean = False
    Dim readValue As Variant
    Dim sKey As String

    sKey = Me.Name '"FMain"

    If IsNull(Me.key) Then
        Error.Raise(("OpenFormFromSettings: key is null"))
    Endif

    'need to use default (design) values after failure, in case an error during opening leaves data in inconsistent state

    readValue = Settings[sKey & "/Top", Me.Top]
    If IsNull(readValue) Then
        Error.Raise(Subst(("Error opening key='&1', Top=Null"), sKey))
    Else
        Me.Top = readValue
    Endif

    readValue = Settings[sKey & "/Left", Me.Left]
    If IsNull(readValue) Then
        Error.Raise(Subst(("Error opening key='&1', Left=Null"), sKey))
    Else
        Me.Left = readValue
    Endif

    readValue = Settings[sKey & "/Height", Me.Height]
    If IsNull(readValue) Then
        Error.Raise(Subst(("Error opening key='&1', Height=Null"), sKey))
    Else
        Me.Height = readValue
    Endif

    readValue = Settings[sKey & "/Width", Me.Width]
    If IsNull(readValue) Then
        Error.Raise(Subst(("Error opening key='&1', Width=Null"), sKey))
    Else
        Me.Width = readValue
    Endif

    returnValue = True
    Return returnValue
Finally
Catch
    Debug Log.FormatError(Error.Text, Error.Where, Error.BackTrace)
    Debug Subst(("Key: '&1'"), sKey)
    Return returnValue

End
