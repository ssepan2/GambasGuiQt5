' Gambas class file

Class Dock Inherits DockAnchorBase
'Constants
'

'Enums
'

'Fields
'

'ctor()
'
'Public Sub _new(controlParam As Control, formParam As Form, usingMenubarParam As Boolean, iDockParam As Integer)
Public Sub _new(iDockParam As Integer)
    'Note: not doing this ByRef, but pointers seem to be working to change passed controls.

    'only used to validate options
    Dim aiDockEnums As New Integer[]

    ' Super.$ctlControl = controlParam
    ' Super.$frmForm = formParam
    ' Super.$bUsingMenubar = usingMenubarParam
    '
    ' 'Note; must call New before form resizes in order to capture initial design
    ' Super.$iControlDesignerX = Super.$ctlControl.X
    ' Super.$iControlDesignerY = Super.$ctlControl.Y
    ' Super.$iControlDesignerWidth = Super.$ctlControl.Width
    ' Super.$iControlDesignerHeight = Super.$ctlControl.Height
    '
    ' ' Super.$iFormDesignerX = Super.$frmForm.X
    ' ' Super.$iFormDesignerY = Super.$frmForm.Y 'Don't care about these 1st two
    ' Super.$iFormDesignerWidth = formParam.Width 'Need these last two
    ' Super.$iFormDesignerHeight = Super.$frmForm.Height

    Super.$iDock = iDockParam

    'validate combinations
    aiDockEnums = [Me.DockNone, Me.DockTop, Me.DockRight, Me.DockBottom, Me.DockLeft]
    If (Not aiDockEnums.Exist(Super.$iDock)) Then
        Error.Raise(Subst("invalid Dock enum: &1", Super.$iDock))
    Endif

    ' Debug Subst("c:&1,x:&2,y:&3,W:&4,h:&5,d:&6", Super.$ctlControl.Name, Super.$iControlDesignerX, Super.$iControlDesignerY, Super.$iControlDesignerWidth, Super.$iControlDesignerHeight, Super.$iDock)
Catch
    Debug Log.FormatError
    Debug Error.Text

End

Public Sub Apply()
    'TODO:allow a 2nd control param to indicate current control is going to dock next to it; 2nd will have to be called after 1st and should be passed reference to first
    ' Note:must call in form resize, after any changes to form size
    ' Note:each anchor and dock is unaware of other, so ones sharing the same corner may overlap

    Dim iWorkingClientWidth As Integer = 0
    Dim iWorkingClientHeight As Integer = 0
    Dim iFormNetChangeWidth As Integer = 0
    Dim iFormNetChangeHeight As Integer = 0

    Super.$iControlNewX = Super.$iControlDesignerX
    Super.$iControlNewY = Super.$iControlDesignerY
    Super.$iControlNewWidth = Super.$iControlDesignerWidth
    Super.$iControlNewHeight = Super.$iControlDesignerHeight

    'Try to use passed form reference
    ' $iFormNewX = $frmForm.X
    ' $iFormNewY = $frmForm.Y 'Don't care about these 1st two
    ' $iFormNewWidth = $frmForm.Width 'Need these last two
    ' $iFormNewHeight = $frmForm.Height
    'Debug Subst("f:w=&1,h=&2", $iFormNewWidth, $iFormNewHeight)

    'Note:use Max() when subtracting anything applied directly to a property
    iWorkingClientWidth = Max(Super.$frmForm.Width - (2 * Super.$frmForm.Padding), 0)
    iWorkingClientHeight = Max(Super.$frmForm.Height - IIf(Super.$bUsingMenubar, Me.MENUBAR_HEIGHT, 0) - (2 * Super.$frmForm.Padding), 0)

    iFormNetChangeWidth = Super.$frmForm.Width - Super.$iFormDesignerWidth
    iFormNetChangeHeight = Super.$frmForm.Height - Super.$iFormDesignerHeight
    ' Debug Subst("f:dW=&1,dH=&2", iFormNetChangeWidth, iFormNetChangeHeight)

    'dock
    If Super.$iDock <> Me.DockNone Then
        Select Super.$iDock
            Case Me.DockTop
                Super.$iControlNewX = Super.$frmForm.Padding
                Super.$iControlNewY = Super.$frmForm.Padding 'TODO:change this to stack multiple (replace w/ $frmForm.Padding+CtlXxx.Y+ctlXxx.Height)
                Super.$iControlNewWidth = iWorkingClientWidth
                Super.$iControlNewHeight = Super.$ctlControl.Height
            Case Me.DockRight
                Super.$iControlNewX = Max(Super.$frmForm.Width - Super.$ctlControl.Width - Super.$frmForm.Padding, Super.$frmForm.Padding) 'TODO:change this to stack multiple (replace $frmForm.Width with ctlXxx.X)
                Super.$iControlNewY = Super.$frmForm.Padding
                Super.$iControlNewWidth = Super.$ctlControl.Width
                Super.$iControlNewHeight = iWorkingClientHeight
            Case Me.DockBottom
                Super.$iControlNewX = Super.$frmForm.Padding
                Super.$iControlNewY = Max(Super.$frmForm.Height - Super.$ctlControl.Height - Super.$frmForm.Padding - IIf(Super.$bUsingMenubar, Me.MENUBAR_HEIGHT, 0), Super.$frmForm.Padding) 'TODO:change this to stack multiple (replace $frmForm.Height with ctlXxx.Y)
                Super.$iControlNewWidth = iWorkingClientWidth
                Super.$iControlNewHeight = Super.$ctlControl.Height
            Case Me.DockLeft
                Super.$iControlNewX = Super.$frmForm.Padding 'TODO:change this to stack multiple (replace w/ $frmForm.Padding+CtlXxx.X+ctlXxx.Width)
                Super.$iControlNewY = Super.$frmForm.Padding
                Super.$iControlNewWidth = Super.$ctlControl.Width
                Super.$iControlNewHeight = iWorkingClientHeight
            Case Else
                Error.Raise(Subst("invalid Dock enum: &1", Super.$iDock))
        End Select
        Super.$ctlControl.Move(Super.$iControlNewX, Super.$iControlNewY, Super.$iControlNewWidth, Super.$iControlNewHeight)
    Endif

Catch
    Debug Log.FormatError
    Debug Error.Text

End
